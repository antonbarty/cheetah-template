#!/bin/bash

echo ""
SCRIPTNAME=$(basename $0)
HELP="Need help?  Try $SCRIPTNAME -h"

# what to do if the user makes a mistake
UERROR () {
echo "================================================================"
echo -e "$1\n$HELP"
echo "================================================================"
echo ""
exit 1
} 

#
# default values
#
OVERWRITE="NO"
PSANA="YES"
[ $CHEETAH ] || CHEETAH="cheetah"
[ $H5DIR ] || H5DIR="."
[ $XTCDIR ] || XTCDIR="."
[ $CONFIGDIR ] || CONFIGDIR="."
[ $PSANA_CONFIG ] || PSANA_CONFIG="psana.cfg"

#
# get options:
#
while getopts "r:i:t:s:n:j:qoOpmcf" OPTION; do
	case $OPTION in
	r) if [ $OPTARG -eq $OPTARG 2> /dev/null ]; then
			RUNDIR=$(printf 'r%04d' $OPTARG)
			RUNNUMBER=$(printf '%d' $OPTARG)
		else
			UERROR "Specify a numerical value for the run number"
		fi;;	
	i) INIFILE=$OPTARG;;
	t) TAG=$OPTARG;;
	q) QUE="YES"
		hash bsub 2>&- || \
			UERROR "The bsub system is not available on this machine"
		;;
	s) ARGS="$ARGS -s $OPTARG";;
	n) ARGS="$ARGS -n $OPTARG";;
	j) NTHREADS=$OPTARG;;
	c) CHUNKS="YES";;
	o) OVERWRITE="CHECK";;
	O) OVERWRITE="FORCE";;
	p) PSANA="YES";;
	f) HDF5="YES";;
	m) MYANA="YES"
	   PSANA="";;
	?) UERROR "Unrecognized option $OPTARG";;
	esac
done


# Make sure directories end with /. It's necessary for find to work
H5DIR=${H5DIR}/
XTCDIR=${XTCDIR}/
CONFIGDIR=${CONFIGDIR}/
printenv PYTHONPATH

# sanity checks
[ -d $H5DIR ]   || UERROR "The hdf5 file path $H5DIR does not exist"
[ -d $XTCDIR ]  || UERROR "The xtc file path $XTCDIR does not exist"
hash $CHEETAH 2>&- || UERROR "$CHEETAH is not executable"
[ $RUNDIR ]     || UERROR "You did not specify a run number"
[ $(find $XTCDIR -maxdepth 1 -name "*${RUNDIR}*.xtc" | wc -l | awk '{print $1}') -gt 0 ] || \
	UERROR "There are no xtc files named *$RUNDIR*.xtc in $XTCDIR"
echo "This is run number $RUNNUMBER"


#
# set the save directory if not specified
#
SAVEDIR=$H5DIR/$RUNDIR
[ $TAG ] && SAVEDIR=$SAVEDIR-$TAG

# if the save directory exists, make sure we can write files as needed
if [ -d $SAVEDIR ]; then
[ -w $SAVEDIR ]   || UERROR "You don't have write permissions in the directory $SAVEDIR"
fi

#
# ini file magic
# no ini file name specified? take a guess:
#
[ $INIFILE ] || INIFILE=$(basename $SAVEDIR).ini

if [ ! -f $INIFILE ]; then
# full path to ini file not specified?  look for it:
echo "Searching for an ini file named $INIFILE"
INIFILE=$(cd $CONFIGDIR ; find $CONFIGDIR -name $INIFILE)
# check if multiple files found
if [ "$(echo $INIFILE | grep -o ' ' | wc -l)" -gt 0 ]; then
	echo "Found too many files:"
	echo -e "$(echo $INIFILE | sed 's/ /\n/g')\n"
	exit 1
fi
fi

# any luck finding the ini file?
[ $INIFILE ] || UERROR "Can't find the right ini file"
[ -f $INIFILE ] || UERROR "Can't find the ini file $INIFILE"
INIFILE=$(readlink -f $INIFILE)

#
# Diagnostics
#
# output from cheetah will go here
LOGFILE=$SAVEDIR/bsub.log

# let me know what's about to happen
echo "Using this ini file: $INIFILE"
echo "Will search for xtc data here: $XTCDIR"
echo "Will save hdf5 data here: $SAVEDIR"

# Make it group friendly
umask 002

#
# Create directory for this data set or clean up existing directory
#
if [ ! -d $SAVEDIR ]; then

	echo "Creating hdf5 data directory"
	mkdir $SAVEDIR
	echo "Moving to hdf5 data directory"
	cd $SAVEDIR
else
	if [ "$OVERWRITE" = "NO" ]; then
		UERROR "The directory $SAVEDIR exists\nTo overwrite use the -o option"
	elif [ "$OVERWRITE" = "CHECK" ]; then
		# check that the previous cheetah job has completed
		if ! grep -Fxq ">-------- End of job --------<" $SAVEDIR/log.txt; then
			UERROR "Previous job has not finished\nTo force the overwrite, use the -O option"
		fi
	fi
	
	echo "Moving to existing data directory $SAVEDIR"
	cd $SAVEDIR
	
	echo "Deleting previous $SCRIPTNAME files"
	rm -f 	*.h5 \
		*.cxi \
		*.ini \
		*.out \
		*.log \
		*.txt 
	      	&> /dev/null
	rm -rf data* &> /dev/null
	rm -rf s* &> /dev/null
fi

#
# Copy configuration files (as a backup of what was run)
#
cp $INIFILE .
cp $INIFILE original.ini
echo "Status: Submitted" > status.txt

# toggle the number of threads here, despite value in ini file
if [ $NTHREADS ]; then
	echo "Will run $NTHREADS worker threads"
	cat cheetah.ini | sed -e '/nthreads/d' > tmp.ini
	echo "nThreads=$NTHREADS" >> tmp.ini
	mv tmp.ini cheetah.ini
fi

# keep a copy of these in the save directory, just in case they change elsewhere
#echo "Copying hdf5 files into the data directory"
#cp $(awk -F '=' '/^geometry/ {print $2}' $INIFILE) $SAVEDIR/geometry.h5 &> /dev/null
#cp $(awk -F '=' '/^darkcal/ {print $2}' $INIFILE) $SAVEDIR/darkcal.h5 &> /dev/null
#cp $(awk -F '=' '/^gaincal/ {print $2}' $INIFILE) $SAVEDIR/gaincal.h5 &> /dev/null
#cp $(awk -F '=' '/^peakmask/ {print $2}' $INIFILE) $SAVEDIR/peakmask.h5 &> /dev/null
#cp $(awk -F '=' '/^badpixelmap/ {print $2}' $INIFILE) $SAVEDIR/badpixelmap.h5 &> /dev/null


# Check XTC files exist.
find $XTCDIR -maxdepth 1 -name "*${RUNDIR}*.xtc" > xtcfiles.txt
[ "$(wc -l xtcfiles.txt | awk '{print $1}')" -lt 1 ] && UERROR "Found no xtc files for $RUNDIR"


###############################
#	Commands to run Onda
###############################
echo "Running Onda..."
ARGS="$ARGS exp=$expt:run=$RUNNUMBER $INIFILE"


#
#	Send to batch queue
#
if [ $QUE ]; then
	#FULLCOMMAND="bsub -q $QUEUE -n 12 -R "span[hosts=1]" -J $RUNDIR -o $LOGFILE $ONDA $ARGS"
	FULLCOMMAND="bsub -q $QUEUE -x -J $RUNDIR -o $LOGFILE mpirun -n $NTHREADS $ONDA $ARGS"
	echo $FULLCOMMAND
	$FULLCOMMAND
	echo "$SCRIPTNAME job sent to queue"
else
	#FULLCOMMAND="valgrind --leak-check=full $ONDA $ARGS" # >& $LOGFILE"
	#FULLCOMMAND="valgrind $ONDA $ARGS" # >& $LOGFILE"
	FULLCOMMAND="$ONDA $ARGS" # >& $LOGFILE"
	echo $FULLCOMMAND
	$FULLCOMMAND
	echo "$SCRIPTNAME has finished"
fi

# make everything group editable!
chmod -R g+rw $SAVEDIR


#############




# make everything group editable!
chmod -R g+rw $SAVEDIR
